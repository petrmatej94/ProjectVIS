using ProjectVIS.Models;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectVIS.DataLayer.DataMapper
{
    public class DriverDataMapper
    {
        public static String SQL_SELECT_ALL = "SELECT * FROM Driver";
        public static String SQL_SELECT_ID = "SELECT * FROM Driver WHERE ID=@id";
        public static String SQL_SELECT_LICENSE = "SELECT * FROM Driver WHERE LicenseNumber=@number";
        public static String SQL_INSERT = "INSERT INTO Driver VALUES (@Name, @Street, @Town, @Country, @Residence, @BirthDate, "
                                        + "@RemainingPoints, @LicenseNumber, @LicenseValidity, @State, @Password);"
                                        + "SELECT CAST(scope_identity() AS int;";

        public static String SQL_UPDATE = "UPDATE Driver SET Name=@Name, Street=@Street, Town=@Town, Country=@Country, "
                                + "Residence=@Residence, BirthDate=@BirthDate, RemainingPoints=@RemainingPoints, "
                                + "LicenseNumber=@LicenseNumber, LicenseValidity=@LicenseValidity, State=@State, Password=@Password "
                                + "WHERE ID=@id";
       


        public List<Driver> FindAll()
        {
            List<Driver> list = null;

            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_SELECT_ALL, connection);

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        list.Add(MapDriver(reader));
                    }
                }
            }


            return list;
        }




        public Driver FindByID(int id)
        {
            Driver driver = null;

            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_SELECT_ID, connection);
                command.Parameters.AddWithValue("@id", id);

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        driver = MapDriver(reader);
                    }
                }
            }
            return driver;
        }

        public Driver FindByLicenseNumber(int number)
        {
            Driver driver = null;

            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_SELECT_LICENSE, connection);
                command.Parameters.AddWithValue("@number", number);

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        driver = MapDriver(reader);
                    }
                }
            }
            return driver;
        }

        public int Save(Driver obj)
        {
            int driverID = -1;
            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_INSERT, connection);
                //command.Parameters.AddWithValue("@ID", obj.ID); //idk if ID too? Should be autogenerated
                command.Parameters.AddWithValue("@Name", obj.Name);
                command.Parameters.AddWithValue("@Street", obj.Street);
                command.Parameters.AddWithValue("@Town", obj.Street);
                command.Parameters.AddWithValue("@Country", obj.Country);
                command.Parameters.AddWithValue("@Residence", obj.Residence);
                command.Parameters.AddWithValue("@BirthDate", obj.BirthDate);
                command.Parameters.AddWithValue("@RemainingPoints", obj.RemainingPoints);
                command.Parameters.AddWithValue("@LicenseNumber", obj.LicenseNumber);
                command.Parameters.AddWithValue("@LicenseValidity", obj.LicenseValidity);
                command.Parameters.AddWithValue("@State", obj.State);
                command.Parameters.AddWithValue("@Password", obj.Password);
                
                driverID = (int)command.ExecuteScalar();
            }

            return driverID;
        }

        public static int Update(Driver obj)
        {
            int ret = 0;

            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_UPDATE, connection);
                command.Parameters.AddWithValue("@ID", obj.ID);
                command.Parameters.AddWithValue("@Name", obj.Name);
                command.Parameters.AddWithValue("@Street", obj.Street);
                command.Parameters.AddWithValue("@Town", obj.Street);
                command.Parameters.AddWithValue("@Country", obj.Country);
                command.Parameters.AddWithValue("@Residence", obj.Residence);
                command.Parameters.AddWithValue("@BirthDate", obj.BirthDate);
                command.Parameters.AddWithValue("@RemainingPoints", obj.RemainingPoints);
                command.Parameters.AddWithValue("@LicenseNumber", obj.LicenseNumber);
                command.Parameters.AddWithValue("@LicenseValidity", obj.LicenseValidity);
                command.Parameters.AddWithValue("@State", obj.State);
                command.Parameters.AddWithValue("@Password", obj.Password);

                ret = command.ExecuteNonQuery();
            }
            return ret;
        }

        //not physicaly deleted, only state is changed to false = inactive driver
        public int DeleteID(int id)
        {
            int ret = 0;

            using (SqlConnection connection = new SqlConnection(DBConnector.GetBuilder().ConnectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand(SQL_UPDATE, connection);
                Driver obj = FindByID(id);
                obj.State = false;
                Update(obj);

                ret = command.ExecuteNonQuery();
            }
            return ret;
        }

        private Driver MapDriver(SqlDataReader reader)
        {
            int i = 0;
            Driver driver = new Driver();
            driver.ID = reader.GetInt32(i++);
            driver.Name = reader.GetString(i++);
            driver.Street = reader.GetString(i++);
            driver.Town = reader.GetString(i++);
            driver.Country = reader.GetString(i++);
            driver.Residence = reader.GetString(i++);
            driver.BirthDate = reader.GetDateTime(i++);
            driver.RemainingPoints = reader.GetInt32(i++);
            driver.LicenseNumber = reader.GetInt32(i++);
            driver.LicenseValidity = reader.GetDateTime(i++);
            driver.State = reader.GetBoolean(i++);
            driver.Password = reader.GetString(i++);

            return driver;
        }




        




    }
}
